{"version":3,"sources":["lib/ghost-kernel.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;AAMO,IAAM,oDAAsB,EAA5B;;;;;;AAMA,IAAM,0DAAyB,EAA/B;;;;IAGM,sBAAA;;;;;;;;;;;;;;;AAYX,uBAAY,UAAZ,EAAyH;AAAA,QAAjG,MAAiG,yDAAxF,+CAA4B,mBAA5B,CAAwF;AAAA,QAAtC,WAAsC,yDAAxB,sBAAwB;;AAAA;;AAAA,+FACjH,UADiH;;AAEvH,UAAK,UAAL,CAAgB,WAAhB;AACA,UAAK,OAAL,GAAe,MAAf;AACA,UAAK,MAAL,CAAY,QAAZ,QAA2B,WAA3B;AAJuH;AAKxH;;;;;;;;;;;;;;;;4BAYO;AACN,WAAK,IAAL,CAAU,OAAV;AACD;;;;;;;;;6CAMwB;AACvB,WAAK,IAAL,CAAU,wBAAV;AACD;;;;;;;;;4BAMO;AACN,WAAK,IAAL,CAAU,OAAV;AACD;;;wBAxBY;AAAE,aAAO,KAAK,OAAZ;AAAsB;;;;;;;;;;;;IA+B1B,gCAAA;;;;;;AAKX,iCAAY,MAAZ,EAAoB;AAAA;;AAClB,SAAK,OAAL,GAAe,MAAf;AACD;;;;;;;;;;wBAMY;AAAE,aAAO,KAAK,OAAZ;AAAsB","file":"ghost-kernel.js","sourcesContent":["import {RoutableComponent, RoutableComponentRoutes} from 'routable-component';\n\n/**\n * ルーティング設定クラスのリスト\n * @type {RoutableComponentRouting[]}\n */\nexport const GhostKernelRoutings = [];\n\n/**\n * コントローラクラスの連想配列\n * @type {Object<GhostKernelController>}\n */\nexport const GhostKernelControllers = {};\n\n/** Ukagaka baseware ghost instance kernel */\nexport class GhostKernel extends RoutableComponent {\n  /**\n   * constructor\n   * @param {Object<EventEmitter>} components components\n   * @param {Shiorif} components.Shiorif SHIORI interface\n   * @param {Shell} components.View Shell interface\n   * @param {SakuraScriptRunner} components.SakuraScriptRunner SakuraScript Runner\n   * @param {NamedKernelManager} components.NamedKernelManager Named Kernel Manager\n   * @param {TimerEventSource} components.Time Timer event source\n   * @param {RoutableComponentRoutes} [routes] ルーティング\n   * @param {Object<GhostKernelController>} [controllers] コントローラ\n   */\n  constructor(components, routes = new RoutableComponentRoutes(GhostKernelRoutings), controllers = GhostKernelControllers) {\n    super(components);\n    this.components.GhostKernel = this;\n    this._routes = routes;\n    this.routes.setup_to(this, controllers);\n  }\n\n  /**\n   * Kernel event routes\n   * @type {RoutableComponentRoutes}\n   */\n  get routes() { return this._routes; }\n\n  /**\n   * start kernel (emits start event)\n   * @return {void}\n   */\n  start() {\n    this.emit('start');\n  }\n\n  /**\n   * emits protocol version fixed event\n   * @return {void}\n   */\n  protocol_version_fixed() {\n    this.emit('protocol_version_fixed');\n  }\n\n  /**\n   * emits close event\n   * @return {void}\n   */\n  close() {\n    this.emit('close');\n  }\n}\n\n/**\n * カーネル用のコントローラ\n * @implements {RoutableComponentController}\n */\nexport class GhostKernelController {\n  /**\n   * コンストラクタ\n   * @param {GhostKernel} kernel カーネル\n   */\n  constructor(kernel) {\n    this._kernel = kernel;\n  }\n\n  /**\n   * カーネル\n   * @type {GhostKernel}\n   */\n  get kernel() { return this._kernel; }\n}\n"]}