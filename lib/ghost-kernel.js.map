{"version":3,"sources":["lib/ghost-kernel.js"],"names":[],"mappings":";;;;;;;;;;AAAA;;;;;;;;;AAGA,QAAQ,2BAAR;AACA,QAAQ,mBAAR;;;;;;AAMO,IAAM,oDAAsB,EAA5B;;;;;;AAMA,IAAM,0DAAyB,EAA/B;;;;IAGM,sBAAA;;;;;;;;;;;;;;;AAYX,uBAAY,YAAZ,EAA2H;AAAA,QAAjG,MAAiG,yDAAxF,+CAA4B,mBAA5B,CAAwF;AAAA,QAAtC,WAAsC,yDAAxB,sBAAwB;;AAAA;;AAAA,QAClH,OADkH,GAC7E,YAD6E,CAClH,OADkH;AAAA,QACzG,IADyG,GAC7E,YAD6E,CACzG,IADyG;AAAA,QACnG,GADmG,GAC7E,YAD6E,CACnG,GADmG;AAAA,QAC9F,OAD8F,GAC7E,YAD6E,CAC9F,OAD8F;AAAA,QACrF,IADqF,GAC7E,YAD6E,CACrF,IADqF;;AAAA;;AAIzH,UAAK,QAAL,GAAgB,OAAhB;AACA,UAAK,KAAL,GAAa,IAAb;AACA,UAAK,IAAL,GAAY,GAAZ;AACA,UAAK,QAAL,GAAgB,OAAhB;AACA,UAAK,KAAL,GAAa,IAAb;;AAEA,UAAK,OAAL,GAAe,MAAf;AACA,UAAK,MAAL,CAAY,QAAZ,QAA2B,WAA3B;AAXyH;AAY1H;;;;;;;;;;;;;;;;4BAgDO;AACN,WAAK,IAAL,CAAU,OAAV;AACD;;;;;;;;;uCAMkB;AACjB,WAAK,IAAL,CAAU,kBAAV;AACD;;;;;;;;;4BAMO;AACN,WAAK,IAAL,CAAU,OAAV;AACD;;;wBA5Da;AAAE,aAAO,KAAK,QAAZ;AAAuB;;;;;;;;;wBAM5B;AAAE,aAAO,KAAK,KAAZ;AAAoB;;;;;;;;;wBAMvB;AAAE,aAAO,KAAK,IAAZ;AAAmB;;;;;;;;;wBAMjB;AAAE,aAAO,KAAK,QAAZ;AAAuB;;;;;;;;;wBAM5B;AAAE,aAAO,KAAK,KAAZ;AAAoB;;;;;;;;;wBAMpB;AAAE,aAAO,IAAP;AAAc;;;;;;;;;wBAMhB;AAAE,aAAO,KAAK,OAAZ;AAAsB;;;;;;;;;;;;IA+B1B,gCAAA;;;;;;AAKX,iCAAY,MAAZ,EAAoB;AAAA;;AAClB,SAAK,OAAL,GAAe,MAAf;AACD;;;;;;;;;;wBAMY;AAAE,aAAO,KAAK,OAAZ;AAAsB","file":"ghost-kernel.js","sourcesContent":["import {RoutableComponent, RoutableComponentRoutes} from 'routable-component';\n\n// shim\nrequire('core-js/fn/array/iterator');\nrequire('core-js/fn/symbol');\n\n/**\n * ルーティング設定クラスのリスト\n * @type {RoutableComponentRouting[]}\n */\nexport const GhostKernelRoutings = [];\n\n/**\n * コントローラクラスの連想配列\n * @type {Hash<GhostKernelController>}\n */\nexport const GhostKernelControllers = {};\n\n/** Ukagaka baseware ghost instance kernel */\nexport class GhostKernel extends RoutableComponent {\n  /**\n   * constructor\n   * @param {Object} event_source - Event source\n   * @param {Shiorif} event_source.shiorif - SHIORI interface\n   * @param {Shell} event_source.view - Shell interface\n   * @param {SakuraScriptPlayer} event_source.ssp - Sakura Script runner\n   * @param {NamedKernelManager} event_source.manager - Named Kernel Manager\n   * @param {TimerEventSource} event_source.time - Timer event source\n   * @param {RoutableComponentRoutes} [routes] - ルーティング\n   * @param {Hash<GhostKernelController>} [controllers] - コントローラ\n   */\n  constructor(event_source, routes = new RoutableComponentRoutes(GhostKernelRoutings), controllers = GhostKernelControllers) {\n    const {shiorif, view, ssp, manager, time} = event_source;\n    super();\n\n    this._shiorif = shiorif;\n    this._view = view;\n    this._ssp = ssp;\n    this._manager = manager;\n    this._time = time;\n\n    this._routes = routes;\n    this.routes.setup_to(this, controllers);\n  }\n\n  /**\n   * SHIORI Interface\n   * @type {Shiorif}\n   */\n  get shiorif() { return this._shiorif; }\n\n  /**\n   * View Interface\n   * @type {Shell}\n   */\n  get view() { return this._view; }\n\n  /**\n   * Sakura Script Player\n   * @type {SakuraScriptPlayer}\n   */\n  get ssp() { return this._ssp; }\n\n  /**\n   * Kernel Manager\n   * @type {NamedKernelManager}\n   */\n  get manager() { return this._manager; }\n\n  /**\n   * Timer event source\n   * @type {TimerEventSource}\n   */\n  get time() { return this._time; }\n\n  /**\n   * Kernel\n   * @type {GhostKernel} kernel\n   */\n  get kernel() { return this; }\n\n  /**\n   * Kernel event routes\n   * @type {RoutableComponentRoutes}\n   */\n  get routes() { return this._routes; }\n\n  /**\n   * start kernel (emits start event)\n   * @return {void}\n   */\n  start() {\n    this.emit('start');\n  }\n\n  /**\n   * emits version complete event\n   * @return {void}\n   */\n  version_complete() {\n    this.emit('version_complete');\n  }\n\n  /**\n   * emits close event\n   * @return {void}\n   */\n  close() {\n    this.emit('close');\n  }\n}\n\n/**\n * カーネル用のコントローラ\n * @implements {RoutableComponentController}\n */\nexport class GhostKernelController {\n  /**\n   * コンストラクタ\n   * @param {GhostKernel} kernel カーネル\n   */\n  constructor(kernel) {\n    this._kernel = kernel;\n  }\n\n  /**\n   * カーネル\n   * @type {GhostKernel}\n   */\n  get kernel() { return this._kernel; }\n}\n"]}