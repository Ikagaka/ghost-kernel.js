{"version":3,"sources":["lib/ghost-kernel.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;AAMO,IAAM,oDAAsB,EAA5B;;;;;;AAMA,IAAM,0DAAyB,EAA/B;;;;IAGM,sBAAA;;;;;;;;;;;;;;AAWX,uBAAY,UAAZ,EAA+H;AAAA,QAAvG,MAAuG,yDAA9F,+CAA4B,mBAA5B,CAA8F;AAAA,QAA5C,iBAA4C,yDAAxB,sBAAwB;AAAA;;AAAA,qHACvH,UADuH,EAC3G,MAD2G,EACnG,iBADmG;;AAE7H,UAAK,iBAAL,CAAuB,aAAvB;AAF6H;AAG9H;;;;;;;;;;;;;;;;AAOC,qBAAK,QAAL,GAAgB,KAAK,UAAL,CAAgB,kBAAhB,CAAmC,OAAnC,CAA2C,IAA3C,CAAhB;;uBAC4B,KAAK,UAAL,CAAgB,aAAhB,CAA8B,cAA9B,CAA6C,KAAK,OAAlD;;;AAA5B,qBAAK;;AACL,qBAAK,IAAL,CAAU,OAAV;;;;;;;;;;;;;;;;;;;;;;;;;gCAQU,WAAW;AACrB,WAAK,IAAL,CAAU,cAAV,EAA0B,SAA1B;AACD;;;;;;;;;;kCAOa,aAAa;AACzB,WAAK,IAAL,CAAU,gBAAV,EAA4B,WAA5B;AACD;;;;;;;;;;;0BAQK,QAAQ,KAAK;AACjB,WAAK,IAAL,CAAU,OAAV,EAAmB,MAAnB,EAA2B,GAA3B;AACD;;;;;;;;;;yBAOI,QAAQ;AACX,WAAK,IAAL,CAAU,MAAV,EAAkB,MAAlB;AACD;;;4BAQO,YAAY;AAClB,aAAO,KAAK,UAAL,CAAgB,aAAhB,CAA8B,aAA9B,CAA4C,KAAK,OAAjD,EAA0D,UAA1D,CAAP;AACD;;;wBARa;AAAE,aAAO,KAAK,QAAZ;AAAuB;;;wBAEnB;AAAE,aAAO,KAAK,cAAZ;AAA6B;;;wBAC/B;AAAE,aAAO,KAAK,UAAL,CAAgB,KAAhB,CAAsB,KAAtB,CAA4B,QAAnC;AAA8C;;;wBAC9C;AAAE,aAAO,KAAK,UAAL,CAAgB,KAAhB,CAAsB,OAAtB,CAA8B,QAArC;AAAgD;;;;;;;;;;;IAW7D,gCAAA;;;;;;AAKX,iCAAY,MAAZ,EAAoB;AAAA;;AAClB,SAAK,OAAL,GAAe,MAAf;AACD;;;;;;;;;;wBAMY;AAAE,aAAO,KAAK,OAAZ;AAAsB","file":"ghost-kernel.js","sourcesContent":["import {RoutableComponent, RoutableComponentRoutes} from 'routable-component';\n\n/**\n * ルーティング設定クラスのリスト\n * @type {RoutableComponentRouting[]}\n */\nexport const GhostKernelRoutings = [];\n\n/**\n * コントローラクラスの連想配列\n * @type {Object<GhostKernelController>}\n */\nexport const GhostKernelControllers = {};\n\n/** Ukagaka baseware ghost instance kernel */\nexport class GhostKernel extends RoutableComponent {\n  /**\n   * constructor\n   * @param {Object<EventEmitter>} components components\n   * @param {Shiorif} components.Shiorif SHIORI interface\n   * @param {Named} components.Named Shell Named interface\n   * @param {NamedKernelManager} components.NamedKernelManager Named Kernel Manager\n   * @param {TimerEventSource} components.TimerEventSource Timer event source\n   * @param {RoutableComponentRoutes} [routes] ルーティング\n   * @param {Object<class<GhostKernelController>>} [controller_classes] コントローラ\n   */\n  constructor(components, routes = new RoutableComponentRoutes(GhostKernelRoutings), controllerClasses = GhostKernelControllers) {\n    super(components, routes, controllerClasses);\n    this.registerComponent('GhostKernel', this);\n  }\n\n  /**\n   * start kernel (emits start event)\n   * @return {void}\n   */\n  async start() {\n    this._namedId = this.components.NamedKernelManager.namedId(this);\n    this._ghostDescript = await this.components.NanikaStorage.ghost_descript(this.namedId);\n    this.emit('start');\n  }\n\n  /**\n   * emits change_shell event\n   * @param {string} shellname シェル名\n   * @return {void}\n   */\n  changeShell(shellname) {\n    this.emit('change_shell', shellname);\n  }\n\n  /**\n   * emits change_balloon event\n   * @param {string} balloonname バルーン名\n   * @return {void}\n   */\n  changeBalloon(balloonname) {\n    this.emit('change_balloon', balloonname);\n  }\n\n  /**\n   * emits close event\n   * @param {string} reason 理由\n   * @param {boolean} all OnCloseAllにあたるならtrue\n   * @return {void}\n   */\n  close(reason, all) {\n    this.emit('close', reason, all);\n  }\n\n  /**\n   * emits halt event\n   * @param {string} reason 理由\n   * @return {void}\n   */\n  halt(reason) {\n    this.emit('halt', reason);\n  }\n\n  get namedId() { return this._namedId; }\n\n  get ghostDescript() { return this._ghostDescript; }\n  get shellDescript() { return this.components.Named.shell.descript; }\n  get balloonDescript() { return this.components.Named.balloon.descript; }\n\n  profile(newProfile) {\n    return this.components.NanikaStorage.ghost_profile(this.namedId, newProfile);\n  }\n}\n\n/**\n * カーネル用のコントローラ\n * @implements {RoutableComponentController}\n */\nexport class GhostKernelController {\n  /**\n   * コンストラクタ\n   * @param {GhostKernel} kernel カーネル\n   */\n  constructor(kernel) {\n    this._kernel = kernel;\n  }\n\n  /**\n   * カーネル\n   * @type {GhostKernel}\n   */\n  get kernel() { return this._kernel; }\n}\n"]}